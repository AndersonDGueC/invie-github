1 configuramos git despues de instalarlo: 
1.1en consola agregamos email- git config --global user.email adguerreroc@...
1.2en consola agregamos usuario- git config --global user.name anderson
1.3 colores- git config --global color-ui true
2 iniciar un repositorio
2.1 git init xxx donde la xxx significa el nombre de la carpeta
2.2 carpetas ya existentes, nos dirigimos  a la carpeta y sobre ella solo 
marcamos git init
2.3 agregar archivos a git, por lo general cuando creamos un archivo este se 
encuentra en nuestro working directrory y queremos pasarlos a nuestro stage,
primero realizamos una verificación con el comando 
git status , si no tinen seguimiento
utilizamos el git add xxxx
luego verificamos con git status	
3si luego quiero sacarlo del git stage utilizamos git --cached xxxx
3.1 si tenemos varios archivos que queremos agregarlos al tiempo es git add-A 
3.2 si quiero borrar los archivos del stage y working directory git rm -f xxxx
3.3 confirmar si hay un archivo que existe en el directorio git add -n xxx
4 comando que compromete nuestros cambios y los sube al repositorio es 
git commit -m "xxx"  las x representa el mesaje que hemos hechos sobre el commit
5 si por error agregamos una modificacion en el archivo base y no agregamos 
una imagen u otro tipo de archivo, procedemos ha agregar el archivo que olvida
mos y seguimos con la siguiente opción 
git commit --amend "xxxx" si mi commit anterior se encontraba bien
en el valor de las x dejamos el nombre anterior
entonces tecleamos solo git commit
ver las listas de commit con git log	
6 versionar el proyecto, utilizamos etiquetas tag, con el comando 
git tag -a version -m "nombre deseado" (se realiza sobre el ultimo comm)
git tag -l para ver las versiones del proyecto
git tag version hash del commit. una etiqueta sencilla sobre cualquier comm	
6.1 elimar y cambiar etiquetas
elimiar git tag -d version
renombrar mi tag git tag -f  -a  version -m 'iniciando el proyecto' y el hash
7. personalizacion de git log
git log --oneline el hash lo va ha resumir
tambien podemos colocar multiples parametros git log --oneline --graph
como avanza la historia de mi proyecto. (versiones alternas)
log de los commits que quieras ver git log -# #numero de commits
8. diferencias entre commits git diff hash mi estado actual con el commit 
del hash compara
8.1 entre dos commits tenemos git diff hash1 hash2
hay que tener encuenta el orden de los paramentros ya que pueden aparecer 
como agregado o eliminado lineas de codigo
9. reset para manipular versiones en el tiempo. por si hubo un error en la
modificación o reescribir git reset --soft --mixed --hard
git reset --mixed descarta cambios y quita archivos de stage
git reset --hard elimina commit y elimina los archivos hasta de working direc
puede eliminar todo que este en el stage, pero si los archivos solo se encuen-
tran en el working directory y no se han subido al stage no los eliminara
si por algun inconveniente borras todo, pero tenemos el hash del ultimo commit
podemos restaurar todo. con git reset --hard sha1 o hash
10. Configurar un editor de texto, por defecto en git esta con vim, pero 
puede ser cualquiera como sublime-text, atom,  visual-estudio
commando: git config --global core.editor "atom --wait"}
11. Creacion de ramas, por si tienen un proyecto con diferentes cualidad
git branch xxxx 
git branch -l lista de ramas
git branch -d x elimina una rama
git branch -m xxx yy renomanbramos una rama xx con yy
12. moviendome entre ramas y versiones para realizar cambios
git checkout xx moverse a la rama xx
12.1 movernos entre commits
git checkout sha1 nos movemos en el tiempo sobre nuestro proyecto.
creamos una rama y accedemos a ella git checkout -b xxx
13 mezclar cambios y resolviendo conflictos git merge
14 reescribir el historial de tu proyecto git rebase
14.1 sigue secuencial los cambios y anexos de las ramas y solo hacerlo en 
tu local
14.2 parte interactiva con git rebase -i 
15 queremos guardar nuestros cambios pero solamente en staging 
git stash
para ver los cambios git stash list
aplicar cambios git stash apply
16.quitar cambios anteriores git checkout -- xxx nombre del archivo para quita
rle los cambios
16.1 sacar el commit de una rama y pasarlo a otra git cherry-pick hash  
hash del commit.
17. clonar un repositorio git clone url
18. aportar a un proyecto diferente, en github utilizo la opcion fork
19. para hacer cambios en tu repositorio local y enviarlo a un servidor
en internet o remoto utilizamos las llaves ssh 
19.1 la creamos con: ssh-keygen -t rsa -b 4096 -C "email" debe ser el mismo 
email.
cuando creas tu llave ssh, la copias en github, para realizar esto 
en linux utilizamos: cat < ~/.ssh/id_rsa.pub
luego vamos a github, configuraciones, buscamos la opcion SSH and GPG keys,
CLICKEAMOS el boton verde New SSH key; procedemos a darle un nomre, pegamos 
el ssh y damos ok
20. Añadir un repositorio remoto a uno local
con git remote add
pero antes debo crear un repositorio en mi github
despues clonamos con HTTP o SSH para despues utilizar git remote add nombre url
en nombre por convencion utilizamos origin
20.1 para revisar que quedo totalmente agregado utilizamos git remote -v
20.2 para eliminar un repositorio utilizamos git remote remove nombre.
21. traer los archivos que se encuentren en el remoto al local
utilizamos el comando git fetch nombre rama: aquí indicamos el nombre con el 
que nombramos nuestra repo remota y la rama de esta.
21.1 luego se obtendra la rama pero esta no esta mezclada con los datos de 
nuestro repositorio local.
aplicamos git merge origin/master posiblemente nos envia un error:
fatal: refusing to merge unrelated histories
ejecutamos el comando git merge origin master --allow-unrelated-histories (flag)
22. Traer cambios en el repositorio remoto y combinarlos 
git pull  nombre rama  
23. los cambios realizados en el local enviarlos a remoto
git push nombre rama
23.1 para agregar tags git push nombre rama --tags
23.2 para agregar otra rama utilizamos git push rama2
